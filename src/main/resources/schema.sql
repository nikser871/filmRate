-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.film
(
    id integer,
    name character varying(50) NOT NULL,
    description text,
    release_date date NOT NULL,
    duration integer NOT NULL,
    mpa_id integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.genre
(
    id integer,
    name character varying(20) NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT name_genres UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.mpa
(
    id integer,
    name character varying(15),
    PRIMARY KEY (id),
    CONSTRAINT name_mpa UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.film_genres
(
    film_genre_id integer,
    genres_id integer,
    PRIMARY KEY (film_genre_id, genres_id)
);

CREATE TABLE IF NOT EXISTS public."user"
(
    id integer,
    name character varying(40) NOT NULL,
    birthday date NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.email
(
    id character varying(64),
    user_id integer,
    PRIMARY KEY (id),
    CONSTRAINT email UNIQUE (user_id)
);

CREATE TABLE IF NOT EXISTS public.login
(
    id character varying(64),
    user_id integer,
    PRIMARY KEY (id),
    CONSTRAINT login UNIQUE (user_id)
);

CREATE TABLE IF NOT EXISTS public.friendship
(
    first_user_id integer,
    second_user_id integer,
    PRIMARY KEY (first_user_id, second_user_id)
);

CREATE TABLE IF NOT EXISTS public.user_film
(
    user_id integer,
    film_id integer,
    PRIMARY KEY (user_id, film_id)
);

ALTER TABLE IF EXISTS public.film
    ADD FOREIGN KEY (mpa_id)
    REFERENCES public.mpa (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.film_genres
    ADD FOREIGN KEY (film_genre_id)
    REFERENCES public.film (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.film_genres
    ADD FOREIGN KEY (genres_id)
    REFERENCES public.genre (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.email
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.login
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.friendship
    ADD FOREIGN KEY (first_user_id)
    REFERENCES public."user" (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.friendship
    ADD FOREIGN KEY (second_user_id)
    REFERENCES public."user" (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_film
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.user_film
    ADD FOREIGN KEY (film_id)
    REFERENCES public.film (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

